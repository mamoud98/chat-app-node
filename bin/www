#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatdev:server');
var http = require('http');
var userHelper = require("../helper/user");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

io.on("connection" , function(socket) {
  
  socket.on("disconnect" , function() {
      // console.log("user is disconnect");
  })

  socket.on("outmsg" , function(data) {
    socket.broadcast.to(userHelper.getUserRoomById(socket.id)).emit('inmsg' , {msg : data , username : userHelper.getUserNameById(socket.id)});
  })

  socket.on("join" , function(user) {
    user.id = socket.id;
    userHelper.listUsers.push(user);
    socket.broadcast.to(user.room).emit('joiningUsers' , userHelper.getUsersRoom(user.room));
  });

  socket.on('leave' , function() {
    var room = userHelper.getUserRoomById(socket.id);
    userHelper.removeUser(socket.id);
    socket.broadcast.to(room).emit('joiningUsers' , userHelper.getUsersRoom(room));
    
  });



  socket.on("typing" ,function(){
    socket.broadcast.to(userHelper.getUserRoomById(socket.id)).emit('typing' , userHelper.getUserNameById(socket.id));
  })

  socket.on('change' , function(username) {
    userHelper.changeId(username , socket.id);
    socket.join(userHelper.getUserRoomById(socket.id));
  });
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
